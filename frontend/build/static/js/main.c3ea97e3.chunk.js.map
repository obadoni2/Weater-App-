{"version":3,"sources":["App.js","index.js"],"names":["App","location","setLocation","useState","currentWeather","setCurrentWeather","forecast","setForecast","error","setError","loading","setLoading","useEffect","fetch","then","response","json","data","console","log","catch","React","createElement","className","onSubmit","e","preventDefault","async","loc","resCurrent","encodeURIComponent","ok","Error","dataCurrent","resForecast","dataForecast","err","message","fetchWeather","type","placeholder","value","onChange","target","name","sys","country","src","weather","icon","alt","description","main","temp","humidity","wind","speed","list","filter","item","index","map","key","Date","dt_txt","toLocaleDateString","weekday","month","day","getFullYear","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c3ea97e3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  // State variables to manage location input, weather data, errors, and loading status\r\n  const [location, setLocation] = useState('');\r\n  const [currentWeather, setCurrentWeather] = useState(null);\r\n  const [forecast, setForecast] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // useEffect to test API connection by fetching London's current weather on mount\r\n  useEffect(() => {\r\n    fetch('http://localhost:5000/weather/current?location=London')\r\n      .then(response => response.json())\r\n      .then(data => console.log(data))\r\n      .catch(error => console.error('Error:', error));\r\n  }, []);\r\n\r\n  // Function to fetch current weather and forecast data from the backend\r\n  const fetchWeather = async (loc) => {\r\n    if (!loc) {\r\n      setError('Please enter a location.');\r\n      return;\r\n    }\r\n    setError('');\r\n    setLoading(true);\r\n    try {\r\n      // Fetch current weather\r\n      const resCurrent = await fetch(`http://localhost:5000/weather/current?location=${encodeURIComponent(loc)}`);\r\n      if (!resCurrent.ok) {\r\n        throw new Error('Failed to fetch current weather.');\r\n      }\r\n      const dataCurrent = await resCurrent.json();\r\n      setCurrentWeather(dataCurrent);\r\n\r\n      // Fetch 5-day forecast\r\n      const resForecast = await fetch(`http://localhost:5000/weather/forecast?location=${encodeURIComponent(loc)}`);\r\n      if (!resForecast.ok) {\r\n        throw new Error('Failed to fetch forecast.');\r\n      }\r\n      const dataForecast = await resForecast.json();\r\n      setForecast(dataForecast);\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setCurrentWeather(null);\r\n      setForecast(null);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Handle form submission to fetch weather data for the entered location\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    fetchWeather(location);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      {/* Header with search form */}\r\n      <header className=\"hero\">\r\n        <div className=\"hero-overlay\">\r\n          <div className=\"hero-content text-center\">\r\n            <h1>Weather Wonder</h1>\r\n            <p>Discover the weather in your favorite locations</p>\r\n            <form onSubmit={handleSubmit} className=\"search-form mt-4\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Enter location (city, zip, landmark...)\"\r\n                value={location}\r\n                onChange={(e) => setLocation(e.target.value)}\r\n              />\r\n              <button type=\"submit\">Search</button>\r\n            </form>\r\n            {error && <div className=\"alert alert-danger mt-3\">{error}</div>}\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Main content area */}\r\n      <main className=\"container py-5\">\r\n        {/* Loading indicator */}\r\n        {loading && (\r\n          <div className=\"loader-container\">\r\n            <div className=\"loader\"></div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Current weather display */}\r\n        {currentWeather && !loading && (\r\n          <div className=\"current-weather card mx-auto mb-5\">\r\n            <div className=\"card-body text-center\">\r\n              <h2>{currentWeather.name}, {currentWeather.sys.country}</h2>\r\n              <div className=\"weather-details d-flex justify-content-center align-items-center\">\r\n                <img\r\n                  src={`http://openweathermap.org/img/wn/${currentWeather.weather[0].icon}@2x.png`}\r\n                  alt={currentWeather.weather[0].description}\r\n                />\r\n                <div className=\"weather-info ml-3\">\r\n                  <h3>{currentWeather.main.temp} °C</h3>\r\n                  <p className=\"mb-0 text-capitalize\">{currentWeather.weather[0].description}</p>\r\n                  <p className=\"mb-0\">Humidity: {currentWeather.main.humidity}%</p>\r\n                  <p className=\"mb-0\">Wind: {currentWeather.wind.speed} m/s</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* 5-day forecast display */}\r\n        {forecast && !loading && (\r\n          <div className=\"forecast-section\">\r\n            <h2 className=\"text-center text-white mb-4\">5-Day Forecast</h2>\r\n            <div className=\"row\">\r\n              {forecast.list\r\n                .filter((item, index) => index % 8 === 0) // Select one entry per day (every 8th item, assuming 3-hour intervals)\r\n                .map((item, index) => (\r\n                  <div key={index} className=\"col-md-2 col-sm-4 col-6\">\r\n                    <div className=\"forecast-card card mb-3\">\r\n                      <div className=\"card-body text-center\">\r\n                        <h5>\r\n                          {new Date(item.dt_txt).toLocaleDateString('en-US', {\r\n                            weekday: 'short',\r\n                            month: 'short',\r\n                            day: 'numeric',\r\n                          })}\r\n                        </h5>\r\n                        <img\r\n                          src={`http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`}\r\n                          alt={item.weather[0].description}\r\n                        />\r\n                        <p className=\"text-capitalize\">{item.weather[0].description}</p>\r\n                        <p>{item.main.temp} °C</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </main>\r\n\r\n      {/* Footer */}\r\n      <footer className=\"text-center py-3\">\r\n        <p className=\"mb-0\">Weather Wonder © {new Date().getFullYear()}</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App.js';\r\nimport './App.css';\r\n// Create a React root and render the App component within React.StrictMode\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}